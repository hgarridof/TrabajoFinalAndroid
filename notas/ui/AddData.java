package com.hgf.android.notas.ui;import android.Manifest;import android.annotation.TargetApi;import android.app.Activity;import android.content.ContentResolver;import android.content.ContentValues;import android.content.Context;import android.content.Intent;import android.content.pm.PackageManager;import android.location.Location;import android.location.LocationListener;import android.location.LocationManager;import android.os.Build;import android.os.Bundle;import android.text.format.DateFormat;import android.util.Log;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.google.android.gms.maps.GoogleMap;import com.google.android.gms.maps.MapFragment;import com.hgf.android.notas.Maps.GPSTracker;import com.hgf.android.notas.Maps.MapsActivity;import com.hgf.android.notas.db.ConnectionDB;import com.hgf.android.notas.R;import com.hgf.android.notas.db.ContentProviderBD;import java.util.Date;import static android.location.LocationManager.GPS_PROVIDER;/** * Created by hector on 3/6/16. */public class AddData extends Activity {    EditText mTitle, mContent;    Button mSave;    String mTitulo, mNota;    int mId;    ConnectionDB db;    GoogleMap mMap;    MapFragment mMapFragment;    double lat, lon;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.insert_data);        int id = 0;        Intent intent = getIntent();        id = intent.getIntExtra("NotaId", 0);        final String titulo = intent.getStringExtra("NotaTitulo");        final String cuerpo = intent.getStringExtra("NotaCuerpo");        //LocationManager lm = (LocationManager) getSystemService(Context.LOCATION_SERVICE);        mSave = (Button) findViewById(R.id.saveButton);        mTitle = (EditText) findViewById(R.id.titleEditText);        mContent = (EditText) findViewById(R.id.bodyEditText);        mId = id;        if (mId != 0) {            mTitle.setText(titulo);            mContent.setText(cuerpo);        }        GPSTracker mGPS = new GPSTracker(this);            if(mGPS.canGetLocation() ){            mGPS.getLocation();            lat = mGPS.getLatitude();            lon = mGPS.getLongitude();        }else{            Log.e("ERROR: ", "Unable to connect");        }        /*        MiLocationListener mlistener = new MiLocationListener();        Location loc;        try {            //lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,35000, 10, locationListener);            loc = lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);            lat = loc.getLatitude();            lon = loc.getLongitude();        }catch (SecurityException e){            Log.d("Error:", e.getMessage());        }        */        Toast.makeText(this, lat + ", " + lon, Toast.LENGTH_LONG).show();        mSave.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (mId != 0) {                    modifyDatos();                } else {                    Toast.makeText(AddData.this, lat + ", " + lon, Toast.LENGTH_LONG).show();                    addDatos(lon, lat);                }            }        });    }    public class MiLocationListener implements LocationListener{        double lon, lat;        public double getLon(LocationManager lm){            Location loc;            //LocationListener locationListener = new MiLocationListener();            try {                //lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,35000, 10, locationListener);                loc = lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);                lon = loc.getLongitude();            }catch (SecurityException e){                Log.d("Error:", e.getMessage());            }            return lon;        }        public double getLat(LocationManager lm){            Location loc;            //LocationListener locationListener = new MiLocationListener();            try {                //lm.requestLocationUpdates(LocationManager.GPS_PROVIDER,35000, 10, locationListener);                loc = lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);                lat = loc.getLatitude();            }catch (SecurityException e){                Log.d("Error:", e.getMessage());            }            return lat;        }        @Override        public void onLocationChanged(Location loc) {            if (loc != null) {                lat = loc.getLatitude();                lon = loc.getLongitude();            }        }        @Override        public void onStatusChanged(String provider, int status, Bundle extras) {        }        @Override        public void onProviderEnabled(String provider) {        }        @Override        public void onProviderDisabled(String provider) {        }    }    private void addDatos(double lon, double lat){        mTitulo = mTitle.getText().toString();        mNota = mContent.getText().toString();        String fecha = "";        fecha = fechaActual();        MapsActivity map = new MapsActivity();        /*        db = new ConnectionDB(this);        db.addNote(mTitulo, mNota, fecha);        */        ContentValues values = new ContentValues();        values.put(ContentProviderBD.Note.COL_TITLE, mTitulo);        values.put(ContentProviderBD.Note.COL_CONTENT, mNota);        values.put(ContentProviderBD.Note.COL_DATE, fecha);        values.put(ContentProviderBD.Note.COL_LATITUDE, lat);        values.put(ContentProviderBD.Note.COL_LONGITUDE, lon);        ContentResolver cr = getContentResolver();        cr.insert(ContentProviderBD.CONTENT_URI, values);        //db.close();        Intent intent = new Intent(AddData.this, MainActivity.class);        startActivity(intent);    }    private void modifyDatos(){        mTitulo = mTitle.getText().toString();        mNota = mContent.getText().toString();        String fecha = "";        fecha = fechaActual();        /*        db = new ConnectionDB(this);        db.addNote(mTitulo, mNota, fecha);        */        ContentValues values = new ContentValues();        values.put(ContentProviderBD.Note.COL_TITLE, mTitulo);        values.put(ContentProviderBD.Note.COL_CONTENT, mNota);        values.put(ContentProviderBD.Note.COL_DATE, fecha);        ContentResolver cr = getContentResolver();        cr.update(ContentProviderBD.CONTENT_URI, values, ContentProviderBD.Note.COL_ID + " = " + mId, null);        //db.close();        Intent intent = new Intent(AddData.this, MainActivity.class);        startActivity(intent);    }    /*    private void modifyDatos(){        mTitulo = mTitle.getText().toString();        mNota = mContent.getText().toString();        db = new ConnectionDB(this);        db.modifyNote(mId, mTitulo, mNota);        //db.close();        Intent intent = new Intent(AddData.this, MainActivity.class);        startActivity(intent);    }    */    private String fechaActual(){        String fecha = "";        Date d = new Date();        CharSequence s = "";        s  = DateFormat.format("MMMM d, yyyy ", d.getTime());        fecha = s.toString();        return fecha;    }}